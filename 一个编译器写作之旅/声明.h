// 所有编译器文件的函数原型

//扫描.c
int 扫描(struct 牌 *牌子);


//树.c
// 创建二元操作的AST节点
struct 抽象句法树节点 *制作抽象句法树节点(int 操作, struct 抽象句法树节点 *左子树,
			  struct 抽象句法树节点 *右子树, int 整型值);

// 创建叶子节点的AST节点
struct 抽象句法树节点 *制作抽象句法树叶子(int 操作, int 整型值);

// 创建一元操作的AST节点
struct 抽象句法树节点 *制作抽象句法树一元(int 操作, struct 抽象句法树节点 *左子树, int 整型值);

/* // 解析二元表达式并返回AST的根节点指针
// struct 抽象句法树节点 *二元表达式(int 基址指针);

// 对给定的AST节点进行求值，并返回结果
//int 解释抽象句法树(struct 抽象句法树节点 *节点指针);

// 生成代码的函数，接受一个指向AST节点的指针作为参数
//void 生成代码(struct 抽象句法树节点 *节点指针); */

//生成.c
// genAST函数用于根据语法树节点生成代码。
int 生成抽象句法树(struct 抽象句法树节点 *节点指针);

// genpreamble函数用于生成程序的前导部分，例如函数和全局变量的声明。
void 生成预漫步();

// genpostamble函数用于生成程序的后导部分，例如返回语句和释放资源的代码。
void 生成后漫步();

// genfreeregs函数用于生成释放寄存器的代码。
void 生成释放寄存器();

// genprintint函数用于生成打印整数的代码。
void 生成印整型(int 寄存);


//代生.c
// 释放所有寄存器的函数，没有参数
void 释放全部_寄存器(void);

// 代码生成的前导部分函数，没有参数
void 代生预漫步();

// 代码生成的后导部分函数，没有参数
void 代生后漫步();

// 加载常量值的函数，接受一个整数值作为参数，并返回一个寄存器
int 代生载入(int 值);

// 加法运算的函数，接受两个寄存器作为参数，并返回一个新的寄存器
int 代生加(int 寄1, int 寄2);

// 减法运算的函数，接受两个寄存器作为参数，并返回一个新的寄存器
int 代生减(int 寄1, int 寄2);

// 乘法运算的函数，接受两个寄存器作为参数，并返回一个新的寄存器
int 代生乘(int 寄1, int 寄2);

// 除法运算的函数，接受两个寄存器作为参数，并返回一个新的寄存器
int 代生除(int 寄1, int 寄2);

// 打印整数值的函数，接受一个寄存器作为参数，没有返回值
void 代生印整型(int 寄);

// 表达式.c
struct 抽象句法树节点 *二元表达式(int 前牌优);

// 语句.c
void 语句(void);

// 杂注.c
void 匹配(int 细牌, char *是啥);
void 分号(void);