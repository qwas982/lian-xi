#include "关键字.h"

#define     细胞        long  //定义数据类型，在32位与64位系统中与指针类型的宽度相同
#define     栈_长度      1024  //定义栈的深度
#define     缓冲_长度    1024  //缓冲区长度
#define     真的         1
#define     假的         0
#define     解释         0     //解释模式
#define     编译         1     //编译模式
#define     展现_字      0     //标记为显示词
#define     立即_字      1     //标记为立即词
#define     隐藏_字      2     //标记为隐藏词

#define 调试 0
#if 调试
    #define 打印(fmt, args...) printf(fmt,##args);
#else
    #define 打印(fmt, args...)
#endif


//代码域函数指针
类型定义 空的(*代码域指针)();  


//用结构体定义Forth的词结构，利用链表实现词典
类型定义 结构 字_
{
    结构 字_    *链接域;              //Forth词的链接域
    细胞           标记旗;              //Forth标记数，用来识别立即词、隐藏词
    字符          *名字域;             //Forth词的名字域
    代码域指针     代码指针;            //Forth词的代码域
    结构 字_    **字形参域;           //Forth词的参数域
} 字_;


//定义字典结构
类型定义 结构 字典_
{
    细胞    字典字数;                     //Forth词典中词的数量
    字_     *字典最后字地址;              //Forth词典链表最后一个词的地址
    字_     *冒号字形参域[缓冲_长度];      //保存编译模式正在定义的扩展词参数域，临时用
} 字典_;


//Forth系统运行时的核心指针
细胞 状态量;                    //Forth状态变量
字符 第四代码文本[缓冲_长度];    //Forth代码文本缓冲区
字符 *当前字首指针;             //当前Forth词的词首指针
字符 *代码文本指针;             //Forth代码文本指针
字典_ *第四字典指针;            //Forth词典指针
细胞 数据栈[栈_长度];          //参数栈
细胞 返回栈[栈_长度];          //返回栈
细胞 *数据指针, *返回指针;               //栈指针
字_ *指令指针列表[缓冲_长度];            //解释模式指令列表，长度为BUFF_LEN  
字_ **指令指针的指针;                   //指令列表指针(指针的指针)
字_ **指令指针的选择指针;               //IPlist选择指针，根据状态变量指向不同的指令列表

//文本解析
整型 检查空白字符(字符 c);       //判断是否为空白字符
字符 *解析第四字();              //返回输入流中当前的forth词，并更新text_p指针

//Forth词的构建函数
字_ *创建(字符 *名字域, 代码域指针  fp);         //创建Forth词的名字域
空的 去做(字_ *c, 字_ **列表, 整型 n);           //创建Forth词中的参数域
字_ *定义核心字(字符 *名字域, 代码域指针  fp);    //创建一个Forth核心词
空的 冒号字代码域();  //扩展词的代码域
空的 常量字代码域();   //常数词的代码域
空的 变量字代码域();    //变量词的代码域

//Forth词典的操作函数
字典_ *字典初始化();
整型 字典指令下一个(字典_ *字典的, 字_ *字的);
字_ *字典搜索名字(字典_ *字典的, 字符 *名字域);
空的 字典摧毁字(字_ *字的);
整型 字典记忆之后(字典_ *字典的, 字符 *名字域);

//Forth指令列表操作函数
空的 指令指针的解释();      //IP列表执行
整型 是否数字(字符 *s);      //判断字符串是否为数字
整型 找字后执行(字典_ *字典的, 字符 *名字域);    //根据词名，去执行相应的IP列表操作

//Forth栈操作函数
空的 空了的栈();
空的 栈错误(整型 n);
空的 指令指针推(字_ *w, 字_** 列表);  //IP栈PUSH
空的 数据栈推(细胞 n);
空的 返回栈推(细胞 n);
细胞 数据栈弹();
细胞 返回栈弹();
细胞 数据栈顶();
细胞 返回栈顶();

//Forth核心词
空的 字面();        // (字面)
空的 弹数据栈();    // .
空的 再见();       // 再见

空的 返来();      // 返

空的 深度();      // 深度
空的 加号();      // +
空的 减号();      // -
空的 乘号();      // *
空的 除号();     // /

空的 丢掉();       // 丢掉
空的 秀数据栈();   // .s
空的 选取();      // 选取
空的 滚动();      // 滚动

空的 入变量();     // !
空的 出变量();     // @

空的 等号();     // =
空的 不等号();   // <>
空的 大于号();   // >
空的 小于号();   // <

空的 若分支();    // ?分支
空的 分支();      // 分支

空的 括号做();        // (做)
空的 括号环();        // (环)

空的 到返回();        // >返
空的 返回到();        // 返>
空的 返回在();        // 返@

空的 发射();         // 发射
空的 多个字();       // 字

空的 立即的();                  // 立即
空的 编译字运行时();             // 编译 编译后面一个词的运行时代码
空的 编译栈顶到冒号字();         // , 编译栈顶数到扩展词定义中
空的 推数据栈_冒号字拾取地址();   // ' 将后面一个词的执行地址压入数据栈

//Forth核心词中的立即词
空的 入解释器();        // [
空的 出解释器();        // ]
空的 我自己();          // 我自己
空的 定义冒号字();      // :
空的 结束冒号字();      // ;
空的 _若字面();        // 若
空的 _否则字面();      // 否则
空的 _那么字面();      // 那么
空的 _做字面();        // 做
空的 _环字面();         // 环
空的 看见();            // 看
空的 忘记();            // 忘记
空的 变量的();          // 变量
空的 常量的();          // 常量
空的 载入();            // 载入


//Forth解释器部分
空的 解释器();
整型 载入_文件(字符 *文件_路径);