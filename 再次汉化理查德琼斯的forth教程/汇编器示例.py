# 汇编器示例.py 当简单教程用

from enum import Enum

class 二进制指令(Enum):
    停止 = 0
    输入 = 1
    输出 = 2
    加 = 3
    减 = 4
    乘 = 5
    除 = 6
    复制 = 7
    加载 = 8
    存储 = 9
    加载常量 = 10
    小于跳转 = 11
    小于等于跳转 = 12
    大于跳转 = 13
    大于等于跳转 = 14
    等于跳转 = 15
    不等于跳转 = 16
    无条件跳转 = 17
    无效 = 18

# 二进制指令结构体
class 指令:
    def __init__(self, 操作码, 操作数):
        self.操作码 = 操作码  # 指令码只占一个字节
        self.操作数 = 操作数  # 操作数，占四个字节

# 初始化汇编指令集
def 初始化汇编指令集(汇编指令集):
    汇编指令集.clear()
    汇编指令集.extend([
        "HALT", "IN", "OUT", "ADD", "SUB", "MUL", "DIV",
        "DUP",
        "LD", "ST", "LDC", "JLT", "JLE", "JGT", "JGE", "JEQ", "JNE", "JMP"
    ])

# 初始化指令-参数个数
def 初始化指令参数个数(指令参数个数):
    指令参数个数.clear()
    指令参数个数[二进制指令.停止] = 0
    指令参数个数[二进制指令.输入] = 0
    指令参数个数[二进制指令.输出] = 0
    指令参数个数[二进制指令.加] = 0
    指令参数个数[二进制指令.减] = 0
    指令参数个数[二进制指令.乘] = 0
    指令参数个数[二进制指令.除] = 0
    指令参数个数[二进制指令.复制] = 0
    指令参数个数[二进制指令.加载] = 0
    指令参数个数[二进制指令.存储] = 0
    指令参数个数[二进制指令.加载常量] = 1
    指令参数个数[二进制指令.小于跳转] = 1
    指令参数个数[二进制指令.小于等于跳转] = 1
    指令参数个数[二进制指令.大于跳转] = 1
    指令参数个数[二进制指令.大于等于跳转] = 1
    指令参数个数[二进制指令.等于跳转] = 1
    指令参数个数[二进制指令.不等于跳转] = 1
    指令参数个数[二进制指令.无条件跳转] = 1
    指令参数个数[二进制指令.无效] = 1

# 建立汇编指令到二进制指令的映射
def 初始化汇编到二进制映射(汇编指令集, 汇编到二进制映射):
    汇编到二进制映射.clear()
    for i, 指令 in enumerate(汇编指令集):
        汇编到二进制映射[指令] = 二进制指令(i)

# 读入汇编指令
def 读取汇编指令(汇编指令列表):
    汇编指令列表.clear()
    while True:
        try:
            行 = input()
            汇编指令列表.append(行)
        except EOFError:
            break

# 显示
def 显示(显示列表):
    for 行 in 显示列表:
        print(行)

def 字符串转大写(字符串):
    return 字符串.upper()

def 汇编到二进制(汇编指令列表, 二进制指令列表, 汇编到二进制映射, 指令参数个数):
    汇编行 = '\t'.join(字符串转大写(行) for 行 in 汇编指令列表)
    print(汇编行)

    from io import StringIO
    输入流 = StringIO(汇编行)
    操作字符串 = 输入流.read().split()

    for 操作字符串 in 操作字符串:
        if 操作字符串 in 汇编到二进制映射:
            操作码 = 汇编到二进制映射[操作字符串]
            参数个数 = 指令参数个数[操作码]
            if 参数个数 > 0:
                参数字符串 = 输入流.read().split()[0]
                操作数 = int(参数字符串)
            else:
                操作数 = 0
            指令实例 = 指令(操作码, 操作数)
            二进制指令列表.append(指令实例)

def 整数转字符串(整数, 字节数):
    结果 = ['0'] * (字节数 * 8)
    for i in range(len(结果) - 1, -1, -1):
        if 整数 == 0:
            break
        结果[i] = str(整数 % 2)
        整数 //= 2
    return ''.join(结果)

def 输出二进制(二进制指令列表, 指令参数个数):
    for 指令实例 in 二进制指令列表:
        print(指令实例.操作码.value, end='\t')
        print(整数转字符串(指令实例.操作码.value, 1), end='\t')
        if 指令实例.操作码 in 指令参数个数 and 指令参数个数[指令实例.操作码] > 0:
            print(指令实例.操作数, end='\t')
            print(整数转字符串(指令实例.操作数, 4))
        else:
            print()

def 主函数():
    # 汇编指令集
    汇编指令集 = []
    初始化汇编指令集(汇编指令集)

    # 二进制指令-操作数个数
    指令参数个数 = {}
    初始化指令参数个数(指令参数个数)

    # 汇编指令到二进制的映射
    汇编到二进制映射 = {}
    初始化汇编到二进制映射(汇编指令集, 汇编到二进制映射)

    汇编指令列表 = []  # 保持读入的汇编指令
    读取汇编指令(汇编指令列表)

    print()
    显示(汇编指令列表)
    print()

    二进制指令列表 = []  # 保存二进制指令
    汇编到二进制(汇编指令列表, 二进制指令列表, 汇编到二进制映射, 指令参数个数)

    输出二进制(二进制指令列表, 指令参数个数)

    print()

if __name__ == "__main__":
    主函数()