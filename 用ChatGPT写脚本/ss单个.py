import os
import re

class 代码搜索者:
    def __init__(自身):
        自身.pattern = r'"([^"]*)"'    # 定义正则表达式，匹配双引号之间的字符串

    def 搜索_字符串们(自身, 文件的路径):
        结果 = {}
        路径列表 = []
        文件路径 = 文件的路径
        with open(文件路径, 'r', encoding='utf-8') as 文件:
            内容 = 文件.read()
            匹配结果 = re.findall(自身.pattern, 内容)    # 使用正则表达式查找匹配的字符串
            if 匹配结果:
                for 匹配 in 匹配结果:
                    结果[匹配] = '占位符'  # 使用占位字符串填充值
                    路径列表.append(文件路径)
                    print(f'在文件 {文件路径} 中找到字符串: {匹配}')

        return 结果, 路径列表

    def _是源代码文件(自身, 文件名):
        源代码文件扩展名 = ['.c', '.h']  # 可根据需要修改
        return any(文件名.endswith(扩展名) for 扩展名 in 源代码文件扩展名)


# 提示用户输入文件路径
文件路径 = input("请输入文件路径：")

# 创建代码搜索者对象并执行搜索
搜索器 = 代码搜索者()
搜索结果, 路径列表 = 搜索器.搜索_字符串们(文件路径)

# 将搜索结果保存到新的文本文件
输出文件 = "搜索结果.c"

with open(输出文件, 'w', encoding='utf-8') as 文件:
    for 键, 值 in 搜索结果.items():
        if 路径列表:
            文件路径 = 路径列表.pop(0)
            文件.write(f'"{键}": "{值}"\n')    #   , 文件路径: "{文件路径}"
            #print(f'在文件 {文件路径} 中找到字符串: "{键}": "{值}"，文件路径: "{文件路径}"')

print(f"搜索结果已保存到 {输出文件} 文件中。")