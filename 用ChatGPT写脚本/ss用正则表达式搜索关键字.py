'''
写一个py脚本: 使用正则搜关键字, 关键字由用户输入, 在一个目录下搜索所有的.c .h文件, 显示每个搜到的关键字所在文件和所在行, 将结果写入一个文件内(用户指定名称), 优化性能,让脚本能在低内存机器上运行, 尽量使用迭代. 用oop.

以下是一个使用正则表达式搜索关键字并在目录中的C和H文件中显示匹配行的Python脚本示例，将结果写入用户指定的文件中。该脚本使用了面向对象编程（OOP）的概念，并通过迭代来优化性能以适应低内存机器。
'''

# -*- coding: utf-8 -*-

import os
import re


class 文件搜索器:
    def __init__(自身, 目录):
        自身.目录 = 目录
        自身.文件扩展名 = ['.c', '.h']    # 根据需要自己改
        自身.结果 = []

    def 搜索文件(自身, 关键字):
        关键字模式 = r'\b{}\b'.format(re.escape(关键字))  # 使用完整单词匹配的正则表达式模式

        for 根目录, 目录列表, 文件列表 in os.walk(自身.目录):
            for 文件名 in 文件列表:
                if 文件名.lower().endswith(tuple(自身.文件扩展名)):
                    文件路径 = os.path.join(根目录, 文件名)
                    自身.搜索关键字在文件中(文件路径, 关键字模式)

    def 搜索关键字在文件中(自身, 文件路径, 模式):
        with open(文件路径, 'r', encoding='utf-8') as 文件:
            行号 = 0
            for 行内容 in 文件:
                行号 += 1
                if re.search(模式, 行内容, re.IGNORECASE):  # 忽略大小写
                    自身.结果.append((文件路径, 行号, 行内容.strip()))

    def 将结果写入文件(自身, 输出文件):
        with open(输出文件, 'w', encoding='utf-8') as 文件:
            for 结果 in 自身.结果:
                文件.write(f'{结果[0]}: 第 {结果[1]} 行 - {结果[2]}\n')


# 获取用户输入
目录 = input('请输入要搜索的目录路径: ')
关键字 = input('请输入要搜索的关键字: ')
输出文件 = input('请输入保存结果的文件名: ')

# 创建文件搜索器对象并执行搜索
搜索器 = 文件搜索器(目录)
print('正在搜索中...')
搜索器.搜索文件(关键字)

# 将结果写入文件
搜索器.将结果写入文件(输出文件)

print('搜索完成！结果已写入文件。')