'''
要添加包含子文件夹的功能，你可以在替换字符串方法中使用递归来处理子文件夹。

现在，替换字符串方法使用os.walk函数遍历包含子文件夹的文件夹。
它会递归地处理每个子文件夹中的文件，并进行相应的替换操作。
注意，os.walk返回三个值：根目录、子文件夹列表和文件列表。
我们只需要处理文件列表中的文件，因此在for循环中只使用了文件列表这个变量。
'''

import re
import os

class 文件替换器:
    def __init__(自身, 文件夹路径, 替换规则):
        自身.文件夹路径 = 文件夹路径
        自身.替换规则 = 替换规则

    def 替换字符串(自身):
        目标扩展名 = ['.c', '.h']  # 指定要替换的扩展名列表，可根据需要修改

        for 根路径, 子文件夹列表, 文件列表 in os.walk(自身.文件夹路径):
            for 文件名 in 文件列表:
                文件路径 = os.path.join(根路径, 文件名)

                if os.path.isfile(文件路径) and os.path.splitext(文件路径)[1] in 目标扩展名:
                    with open(文件路径, 'r', encoding='utf-8') as 文件:
                        内容 = 文件.read()

                    for 模式, 替换字符串 in 自身.替换规则.items():
                        内容 = re.sub(r'\b' + 模式 + r'\b', 替换字符串, 内容)

                    with open(文件路径, 'w', encoding='utf-8') as 文件:
                        文件.write(内容)

                    print(f"已替换文件：{文件路径}")

        print("替换完成！")

# 示例用法
文件夹路径 = "1"  # 请将文件夹路径修改为你要操作的文件夹路径
替换规则 = {
    "TY_VOID": "类型_空的",
}

替换器 = 文件替换器(文件夹路径, 替换规则)
替换器.替换字符串()