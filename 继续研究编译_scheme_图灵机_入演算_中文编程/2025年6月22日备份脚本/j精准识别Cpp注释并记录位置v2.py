import os
from enum import Enum, auto

class 注释类型(Enum):
    单行注释 = auto()
    多行注释 = auto()

class 注释扫描器:
    class 状态(Enum):
        默认 = auto()
        检查注释 = auto()
        单行注释 = auto()
        多行注释 = auto()
        检查多行注释结束 = auto()
        字符串 = auto()
        字符 = auto()

    def __init__(自身):
        自身.重置()
        自身.代码内容 = ''
        自身.文件路径 = ''

    def 重置(自身):
        自身.当前状态 = 自身.状态.默认
        自身.行号 = 1
        自身.注释列表 = []
        自身.当前注释序号 = 1
        自身.注释起始行 = 0

    def 扫描文件(自身, 文件路径):
        if not os.path.exists(文件路径):
            raise FileNotFoundError(f"文件不存在: {文件路径}")
        自身.文件路径 = 文件路径
        with open(文件路径, 'r', encoding='utf-8') as 文件:
            自身.代码内容 = 文件.read()
        return 自身.扫描代码(自身.代码内容)

    def 扫描代码(自身, 代码):
        自身.重置()
        自身.代码内容 = 代码
        代码长度 = len(代码)
        当前位置 = 0

        while 当前位置 < 代码长度:
            当前字符 = 代码[当前位置]

            if 自身.当前状态 == 自身.状态.默认:
                自身.处理默认状态(当前字符, 当前位置)
            elif 自身.当前状态 == 自身.状态.检查注释:
                自身.处理检查注释状态(当前字符, 当前位置)
            elif 自身.当前状态 == 自身.状态.单行注释:
                自身.处理单行注释状态(当前字符, 当前位置)
            elif 自身.当前状态 == 自身.状态.多行注释:
                自身.处理多行注释状态(当前字符, 当前位置)
            elif 自身.当前状态 == 自身.状态.检查多行注释结束:
                自身.处理检查多行注释结束状态(当前字符, 当前位置)
            elif 自身.当前状态 == 自身.状态.字符串:
                自身.处理字符串状态(当前字符, 自身.代码内容, 当前位置)
            elif 自身.当前状态 == 自身.状态.字符:
                自身.处理字符状态(当前字符)

            当前位置 += 1

        自身.处理未结束的注释()
        return 自身.注释列表

    def 处理默认状态(自身, 字符, 当前位置):
        if 字符 == '/':
            自身.当前状态 = 自身.状态.检查注释
            自身.注释起始行 = 自身.行号
        elif 字符 == '"':
            自身.当前状态 = 自身.状态.字符串
        elif 字符 == "'":
            自身.当前状态 = 自身.状态.字符
        elif 字符 == '\n':
            自身.行号 += 1

    def 处理检查注释状态(自身, 字符, 当前位置):
        if 字符 == '/':
            始位置 = 当前位置 - 1
            自身.添加注释(注释类型.单行注释, 始位置)
            自身.当前状态 = 自身.状态.单行注释
        elif 字符 == '*':
            始位置 = 当前位置 - 1
            自身.添加注释(注释类型.多行注释, 始位置)
            自身.当前状态 = 自身.状态.多行注释
        else:
            自身.当前状态 = 自身.状态.默认

    def 处理单行注释状态(自身, 字符, 当前位置):
        if 字符 == '\n':
            自身.注释列表[-1]['终位置'] = 当前位置 - 1
            自身.注释列表[-1]['结束行'] = 自身.行号
            自身.行号 += 1
            自身.当前状态 = 自身.状态.默认

    def 处理多行注释状态(自身, 字符, 当前位置):
        if 字符 == '*':
            自身.当前状态 = 自身.状态.检查多行注释结束
        elif 字符 == '\n':
            自身.行号 += 1

    def 处理检查多行注释结束状态(自身, 字符, 当前位置):
        if 字符 == '/':
            自身.注释列表[-1]['终位置'] = 当前位置
            自身.注释列表[-1]['结束行'] = 自身.行号
            自身.当前状态 = 自身.状态.默认

    def 处理字符串状态(自身, 字符, 代码, 位置):
        if 字符 == '"':
            自身.当前状态 = 自身.状态.默认
        elif 字符 == '\\':
            if 位置 + 1 < len(代码) and 代码[位置 + 1] == '\n':
                自身.行号 += 1
        elif 字符 == '\n':
            自身.行号 += 1

    def 处理字符状态(自身, 字符):
        if 字符 == "'":
            自身.当前状态 = 自身.状态.默认

    def 添加注释(自身, 类型, 始位置):
        自身.注释列表.append({
            '序号': 自身.当前注释序号,
            '类型': '单行' if 类型 == 注释类型.单行注释 else '多行',
            '起始行': 自身.注释起始行,
            '结束行': None,
            '始位置': 始位置,
            '终位置': None
        })
        自身.当前注释序号 += 1

    def 处理未结束的注释(自身):
        if 自身.当前状态 in (自身.状态.多行注释, 自身.状态.检查多行注释结束):
            自身.注释列表[-1]['终位置'] = len(自身.代码内容) - 1
            自身.注释列表[-1]['结束行'] = 自身.行号

class REPL界面:
    def __init__(自身):
        自身.扫描器 = 注释扫描器()

    def 运行(自身):
        print("C/C++注释扫描器 REPL")
        print("输入.c文件路径或命令: review/exit")
        while True:
            用户输入 = input(">>> ").strip()
            if 用户输入.lower() in ('exit', '退出', 'q'):
                break
            elif 用户输入 == 'review':
                自身.处理注释移除()
            else:
                自身.处理文件扫描(用户输入)

    def 处理文件扫描(自身, 文件路径):
        文件类型 = (".c", ".h")
        if not 文件路径.endswith(文件类型):
            print("错误: 请指定.c或.h文件")
            return
        try:
            注释列表 = 自身.扫描器.扫描文件(文件路径)
            自身.显示结果(注释列表)
        except Exception as e:
            print(f"错误: {str(e)}")

    def 显示结果(自身, 注释列表):
        if not 注释列表:
            print("未找到任何注释")
            return
        print(f"\n找到 {len(注释列表)} 个注释:")
        for 注释 in 注释列表:
            范围 = f"第{注释['起始行']}行" if 注释['类型'] == '单行' else f"第{注释['起始行']}-{注释['结束行']}行"
            print(f"{注释['序号']}. [{注释['类型']}注释] {范围}")

    def 处理注释移除(自身):
        if not 自身.扫描器.代码内容:
            print("请先扫描文件")
            return
        注释列表 = 自身.扫描器.注释列表
        if not 注释列表:
            print("没有可移除的注释")
            return

        移除区间 = []
        for 注释 in 注释列表:
            if 注释['终位置'] is None:
                continue
            起始 = 注释['始位置']
            终 = 注释['终位置']
            内容 = 自身.扫描器.代码内容[起始:终+1]
            print(f"\n注释 {注释['序号']} ({注释['类型']}注释，行{注释['起始行']}-{注释['结束行']}):")
            print(内容)
            选择 = input("是否移除此注释？(y/n): ").lower()
            if 选择 == 'y':
                移除区间.append((起始, 终))

        新代码 = []
        前一个_终 = 0
        for 起始, 终 in sorted(移除区间, key=lambda x: x[0]):
            新代码.append(自身.扫描器.代码内容[前一个_终:起始])
            前一个_终 = 终 + 1
        新代码.append(自身.扫描器.代码内容[前一个_终:])
        新代码内容 = ''.join(新代码)

        保存选择 = input("\n是否保存修改到文件？(y/n): ").lower()
        if 保存选择 == 'y':
            try:
                with open(自身.扫描器.文件路径, 'w', encoding='utf-8') as f:
                    f.write(新代码内容)
                print("修改已保存")
            except Exception as e:
                print(f"保存失败: {e}")
        else:
            print("修改已丢弃")

if __name__ == "__main__":
    REPL界面().运行()