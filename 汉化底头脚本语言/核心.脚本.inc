static const char* 核心模块代码 =
"类 空指针大 {}\n"
"类 布尔 {}\n"
"类 数目 {}\n"
"类 函大 {}\n"
"类 线程 {}\n"
"\n"
"类 序列 {\n"
"   全部(f) {\n"
"      变量 结果 = 真\n"
"      为 元素 (这个) {\n"
"         结果 = f.调用(元素)\n"
"         若 (!结果) 返回 结果\n"
"      }\n"
"      返回 结果\n"
"   }\n"
"\n"
"   任意(f) {\n"
"      变量 结果 = 假\n"
"      为 元素 (这个) {\n"
"         结果 = f.调用(元素)\n"
"         若 (结果) 返回 结果\n"
"      }\n"
"      返回 结果\n"
"   }\n"
"\n"
"   内容(元素) {\n"
"      为 一项 (这个) 若 (元素 == 一项) 返回 真\n"
"      返回 假\n"
"   }\n"
"\n"
"   计数 {\n"
"      变量 结果 = 0\n"
"      为 元素 (这个) 结果 = 结果 + 1\n"
"      返回 结果\n"
"   }\n"
"\n"
"   计数(f) {\n"
"      变量 结果 = 0\n"
"      为 元素 (这个) 若 (f.调用(元素)) 结果 = 结果 + 1\n"
"      返回 结果\n"
"   }\n"
"\n"
"   每个(f) {\n"
"      为 元素 (这个) f.调用(元素)\n"
"   }\n"
"\n"
"   是否空 {\n"
"      返回 迭代的(空指针) ? 假 : 真\n"
"   }\n"
"\n"
"   映射小(变形) {\n"
"      返回 映射序列.新(这个, 变形)\n"
"   }\n"
"\n"
"   哪里(谓词) {\n"
"      返回 哪里序列.新(这个, 谓词)\n"
"   }\n"
"\n"
"   简化(累积, f) {\n"
"      为 元素 (这个) 累积 = f.调用(累积, 元素)\n"
"      返回 累积\n"
"   }\n"
"\n"
"   简化(f) {\n"
"      变量 迭代 = 迭代的(空指针)\n"
"      若 (!迭代) 线程.中止(\"不能简化一个空序列.\")\n"
"      变量 结果 = 迭代器值(迭代)\n"
"      一会儿 (迭代 = 迭代的(迭代)) 结果 = f.调用(结果, 迭代器值(迭代))\n"
"      返回 结果\n"
"  }\n"
"\n"
"   加入(序p) {\n"
"      变量 第一 = 真\n"
"      变量 结果 = \"\"\n"
"      为 元素 (这个) {\n"
"         若 (!第一) 结果 = 结果 + 序p\n"
"         第一 = 假\n"
"         结果 = 结果 + 元素.到字符串\n"
"      }\n"
"      返回 结果\n"
"   }\n"
"\n"
"   加入() {\n"
"      返回 加入(\"\")\n"
"   }\n"
"\n"
"   到列表 {\n"
"      变量 结果 = 列表.新()\n"
"      为 元素 (这个) 结果.加上(元素)\n"
"      返回 结果\n"
"   }\n"
"}\n"
"\n"
"类 映射序列 < 序列 {\n"
"   变量 序列\n"
"   变量 函\n"
"   新(序, f) {\n"
"      序列 = 序\n"
"      函 = f\n"
"   }\n"
"\n"
"  迭代的(迭代器) { \n"
"     返回 序列.迭代的(迭代器)\n"
"  }\n"
"  迭代器值(迭代器) {\n"
"     返回 函.调用(序列.迭代器值(迭代器))\n"
"  }\n"
"}\n"
"\n"
"类 哪里序列 < 序列 {\n"
"   变量 序列\n"
"   变量 函\n"
"   新(序, f) {\n"
"      序列 = 序\n"
"      函 = f\n"
"   }\n"
"\n"
"   迭代的(迭代器) {\n"
"      一会儿 (迭代器 = 序列.迭代的(迭代器)) \n"
"        若 (函.调用(序列.迭代器值(迭代器))) 破断\n"
"      返回 迭代器\n"
"   }\n"
"\n"
"   迭代器值(迭代器) {\n"
"      返回 序列.迭代器值(迭代器)\n"
"   }\n"
"}\n"
"\n"
"类 字符串大 < 序列 {\n"
"   字节们 { \n"
"      返回 字符串字节序列.新(这个)\n"
"   }\n"
"   代码点们 {\n"
"      返回 字符串代码点序列.新(这个)\n"
"   }\n"
"\n"
"   *(计数) {\n"
"      若 (!(计数 是 数目了) || !计数.是否整数 || 计数 < 0) \n"
"         线程.中止(\"计数必须是一个非负整数.\")\n"
"      变量 结果 = \"\"\n"
"      为 i (0..(计数 - 1)) 结果 = 结果 + 这个\n"
"      返回 结果\n"
"   }\n"
"}\n"
"\n"
"类 字符串字节序列 < 序列 {\n"
"   变量 字符串\n"
"   新(串) {\n"
"      字符串 = 串\n"
"   }\n"
"\n"
"   [索引] { \n"
"      返回 字符串.字节在_(索引)\n"
"   }\n"
"   迭代的(迭代器) {\n"
"      返回 字符串.迭代的字节_(迭代器) \n"
"   }\n"
"   迭代器值(迭代器) {\n"
"      返回 字符串.字节在_(迭代器) \n"
"   }\n"
"\n"
"   计数 { \n"
"      返回 字符串.字节计数_ \n"
"   }\n"
"}\n"
"\n"
"类 字符串代码点序列 < 序列 {\n"
"   变量 字符串\n"
"   新(串) {\n"
"      字符串 = 串\n"
"   }\n"
"\n"
"   [索引] { \n"
"      返回 字符串.代码点在_(索引)\n"
"   }\n"
"   迭代的(迭代器) {\n"
"      返回 字符串.迭代的(迭代器) \n"
"   }\n"
"   迭代器值(迭代器) {\n"
"      返回 字符串.代码点在_(迭代器)\n"
"   }\n"
"\n"
"   计数 {\n"
"      返回 字符串.计数 \n"
"   }\n"
"}\n"
"\n"
"类 列表 < 序列 {\n"
"   加上全部(其它) {\n"
"      为 元素 (其它) 加上(元素)\n"
"      返回 其它\n"
"   }\n"
"\n"
"   到字符串 {\n"
"      返回 \"[%(加入(\",\"))]\" \n"
"   }\n"
"\n"
"   +(其它) {\n"
"      变量 结果 = 这个[0..-1]\n"
"      为 元素 (其它) 结果.加上(元素)\n"
"      返回 结果\n"
"   }\n"
"\n"
"   *(计数) {\n"
"      若 (!(计数 是 数目了) || !计数.是否整数 || 计数 < 0) \n"
"         线程.中止(\"计数必须是一个 非负整数.\")\n"
"      变量 结果 = []\n"
"      为 i (0..(计数 - 1)) 结果.加上全部(这个)\n"
"      返回 结果\n"
"   }\n"
"}\n"
"\n"
"类 映射 {\n"
"   键们 { \n"
"      返回 值们映射键序列.新(这个) \n"
"   }\n"
"   值们 {\n"
"      返回 映射值序列.新(这个)\n"
"   }\n"
"\n"
"   到字符串 {\n"
"      变量 第一 = 真\n"
"      变量 结果 = \"{\"\n"
"\n"
"      为 键 (键们) {\n"
"         若 (!第一) 结果 = 结果 + \", \"\n"
"         第一 = 假\n"
"         结果 = 结果 + \"%(键): %(这个[键])\"\n"
"      }\n"
"\n"
"      返回 结果 + \"}\"\n"
"   }\n"
"}\n"
"\n"
"类 值们映射键序列 < 序列 {\n"
"   变量 映射小\n"
"   新(mp) {\n"
"      映射小 = mp\n"
"   }\n"
"\n"
"   迭代的(n) {\n"
"      返回 映射小.迭代的_(n) \n"
"   }\n"
"   迭代器值(迭代器) {\n"
"      返回 映射小.键迭代器值_(迭代器)\n"
"   }\n"
"}\n"
"\n"
"类 映射值序列 < 序列 {\n"
"    变量 映射小\n"
"    新(mp) {\n"
"       映射小 = mp\n"
"    }\n"
"\n"
"   迭代的(n) {\n"
"      返回 映射小.迭代的_(n) \n"
"   }\n"
"   迭代器值(迭代器) {\n"
"      返回 映射小.值迭代器值_(迭代器) \n"
"   }\n"
"}\n"
"\n"
"类 范围 < 序列 {}\n"
"\n"
"类 系统 {\n"
"   静止 打印() {\n"
"      写字符串_(\"\n\")\n"
"   }\n"
"\n"
"   静止 打印(对象了) {\n"
"      写对象_(对象了)\n"
"      写字符串_(\"\n\")\n"
"      返回 对象了\n"
"   }\n"
"\n"
"   静止 打印全部(序列) {\n"
"      为 对象 (序列) 写对象_(对象)\n"
"      写字符串_(\"\n\")\n"
"   }\n"
"\n"
"   静止 写(对象了) {\n"
"      写对象_(对象了)\n"
"      返回 对象了\n"
"   }\n"
"\n"
"   静止 写全部(序列) {\n"
"      为 对象 (序列) 写对象_(对象)\n"
"   }\n"
"\n"
"   静止 写对象_(对象了) {\n"
"      变量 串 = 对象了.到字符串\n"
"      若 (串 是 字符串大) {\n"
"         写字符串_(串)\n"
"      } 否则 {\n"
"         写字符串_(\"[无效 到字符串]\")\n"
"      }\n"
"   }\n"
"}\n";
