#include <iostream>
using namespace std;

//结构体一句话描述就是,自定义数据类型,相对于语言内置类型来说. 复合功能,
struct 学生{
    string 名称; int 年龄; int 分数;
}学3;

int 结构体的使用和定义()
{
    struct 学生 学1; 学1.名称 = "张三"; 学1.年龄=18; 学1.分数=100;
    cout<<"名称:  "<<学1.名称<<"  年龄:  "<<学1.年龄<<"  分数:  "<<学1.分数<<endl;

    struct 学生 学2 = { "李四", 10, 59 };
    cout<<"名称:  "<<学2.名称<<"  年龄:  "<<学2.年龄<<"  分数:  "<<学2.分数<<endl;

    学3.名称="王五"; 学3.年龄=19; 学3.分数=00;
    cout<<"名称:  "<<学3.名称<<"  年龄:  "<<学3.年龄<<"  分数:  "<<学3.分数<<endl;

    return 0;
}

int 结构体数组()
{
    struct 学生 数组[3]={{"张三",11,111},{"李四",22,222},{"王五",33,333}};
    for(int 甲=0;甲<3;甲++)
    {cout<<"姓名:"<<数组[甲].名称<<" 年龄:"<<
    数组[甲].年龄<<" 分数:"<<数组[甲].分数<<endl;} return 0;
}

int 结构体指针()
{
    // 结构体指针访问结构体属性的成员 -> 访问符,
    struct 学生 学={"张三",12,322,}; struct 学生* 针=&学;
    cout<<" 分数:"<<针->分数<<endl; 针->分数=80;
    cout<<"姓名:"<<针->名称<<" 年龄:"<<针->年龄<<" 分数:"<<针->分数<<endl;
    return 0;
}

struct 教师
{
    int 身份; string 名称; int 年龄; struct 学生 学;
};

int 嵌套结构体(){
    struct 教师 教1; 教1.身份=1000; 教1.名称="老王"; 教1.年龄=40;
    教1.学.名称="张三"; 教1.学.年龄=19; 教1.学.分数=99;
    cout<<"教师的身份:"<<教1.身份<<" 姓名:"<<教1.名称<<" 年龄:"<<教1.年龄<<endl;
    cout<<"学生的姓名:"<<教1.学.名称<<" 年龄:"<<
    教1.学.年龄<<" 分数:"<<教1.学.分数<<endl; return 0;
}

void 打印学生(学生 学)
{
    学.年龄=23; cout<<"子函数中的姓名:"<<学.名称<<" 年龄:"<<学.年龄<<
    " 分数:"<<学.分数<<endl; 
}

void 打印学生1(学生* 学)
{
    学->年龄=33; cout<<"子函数中的姓名:"<<学->名称<<
    " 年龄:"<<学->年龄<<" 分数:"<<学->分数<<endl;
}

int 结构体作函数参数()
{
    学生 学={"张三",18,333}; 打印学生(学);
    cout<<"主函数中的姓名:"<<学.名称<<
    " 年龄:"<<学.年龄<<" 分数:"<<学.分数<<endl; cout<<endl;
    打印学生1(&学); cout<<"主函数中的"<<学.名称<<
    " 年龄:"<<学.年龄<<" 分数:"<<学.分数<<endl; return 0;

}

void 打印学生3(const 学生* 学)
{
    //学->年龄=100;
    cout<<"姓名:"<<学->名称<<" 年龄:"<<学->年龄<<" 分数:"<<学->分数<<endl;
}

int 结构体中const使用场景()
{
    学生 学={"张三",19,99}; 打印学生3(&学); return 0;
}

//案例
struct 学子{ string 名字; int 分数;};
struct 教者{ string 名字; 学子 学数组[5];};

void 分配空间(教者 教数组[],int 长度){
    string 教名字="教师"; string 学名字="学生"; string 名字种子="甲乙丙丁戊";
    for(int 甲1=0;甲1<长度;甲1++)
    {教数组[甲1].名字=教名字+名字种子[甲1];
    for(int 乙1=0;乙1<5;乙1++)
    {教数组[甲1].学数组[乙1].名字=学名字+名字种子[乙1];
    教数组[甲1].学数组[乙1].分数=rand()%61+40;}}
}

void 打印教师(教者 教数组[],int 长度)
{
    for(int 甲=0;甲<长度;甲++)
    {cout<<教数组[甲].名字<<endl;
    for(int 乙=0;乙<5;乙++)
    {cout<<"姓名:"<<教数组[甲].学数组[乙].名字
    <<"分数:"<<教数组[甲].学数组[乙].分数<<endl;}}
}

int 结构体案例1()
{
    srand((unsigned int)time(NULL)); 教者 教数组[3];
    int 长度=sizeof(教数组)/sizeof(教者);
    分配空间(教数组,长度); 打印教师(教数组,长度); return 0;

}

//案例
struct 英雄{ string 名字; int 岁数; string 性别;};

void 冒泡排序(英雄 数组[], int 长度)
{for(int 甲=0;甲<长度-1;甲++)
for(int 乙=0;乙<长度-1-甲;乙++)
{if(数组[乙].岁数>数组[乙+1].岁数)
{英雄 临时=数组[乙]; 数组[乙]=数组[乙+1]; 数组[乙+1]=临时;}}}

void 打印英雄(英雄 数组[], int 长度)
{
    for(int 甲=0;甲<长度;甲++)
    {cout<<"姓名:"<<数组[甲].名字<<
    " 性别:"<<数组[甲].性别<<" 岁数:"<<数组[甲].岁数<<endl;}
}

int 结构体案例2()
{
    struct 英雄 数组[5]={{"刘备",23,"男"},{"关羽",33,"男"},
    {"张飞",32,"男"},{"赵云",12,"男"},{"黄月英",11,"女"},};
    int 长度=sizeof(数组)/sizeof(英雄);
    冒泡排序(数组,长度); 打印英雄(数组,长度); return 0;
}

int main()
{
    //结构体的使用和定义();
    //结构体数组();
    //结构体指针();
    //嵌套结构体();
    //结构体作函数参数();
    //结构体中const使用场景();
    //结构体案例1();
    结构体案例2();

    return 0;
}