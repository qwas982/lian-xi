/*------------------------------------------------
---------------------所有.h头文件------------------
------------------------------------------------*/

#ifndef _定义_H_
#define _定义_H_

/*------------------------------------------------
---------------------定义.h------------------
------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

//结构和枚举定义

//牌类型 
enum{
	牌名_文件终,
	牌名_加,牌名_减,牌名_星,
	牌名_斜杠,牌名_整型字面,
};

//牌结构
struct 牌{
	int 牌;
	int 整型值;
};

//抽象句法树 节点 类型
enum{
	抽象_加法,抽象_减法,抽象_乘法,抽象_除法,
	抽象_整型字面,
};

//抽象句法树结构
struct 抽象句法树节点{
	int 操作;  //在此树上进行"操作"
	struct 抽象句法树节点 *左;  //左与右孩子树
	struct 抽象句法树节点 *右;
	int 整型值;  //为 抽象_整型字面, 的整数值
};


/*------------------------------------------------
---------------------声明.h------------------
------------------------------------------------*/

//函数原型为所有编译器文件
int 扫描(struct 牌 *牌名);
struct 抽象句法树节点 *制作抽象句法树节点(int 操作,struct 抽象句法树节点 *左,
					struct 抽象句法树节点 *右,int 整型值);
struct 抽象句法树节点 *制作抽象句法树叶(int 操作,int 整型值);
struct 抽象句法树节点 *制作抽象句法树一元(int 操作,struct 抽象句法树节点 *左,int 整型值);
struct 抽象句法树节点 *二元表达式(int rbp);
int 解释抽象句法树(struct 抽象句法树节点 *节点);

void 生成代码(struct 抽象句法树节点 *节点);
void 自由全部_寄存器(void);
void 代码生成器前文();
void 代码生成器后文();
int 代码生成器载入(int 值);
int 代码生成器加(int 寄存1,int 寄存2);
int 代码生成器减(int 寄存1,int 寄存2);
int 代码生成器乘(int 寄存1,int 寄存2);
int 代码生成器除(int 寄存1,int 寄存2);
void 代码生成器打印整型(int 寄存);



/*------------------------------------------------
---------------------数据.h头文件------------------
------------------------------------------------*/

#ifndef 外部_
	#define 外部_ extern
#endif

//全局变量

外部_ int 行;
外部_ int 放回去;
外部_ FILE *文件内;
外部_ FILE *文件外;
外部_ struct 牌 大牌;

#endif //_定义_H_