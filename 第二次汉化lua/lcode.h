/*
** $Id: lcode.h $
** Code generator for Lua
** See Copyright Notice in lua.h
*/

#ifndef lcode_h
#define lcode_h

#include "llex.h"
#include "lobject.h"
#include "lopcodes.h"
#include "lparser.h"


/*
** Marks the 终_变量 of a patch 列表_变量. It is an invalid 值_圆 both as an absolute
** address, and as a 列表_变量 link (would link an element 到_变量 itself).
*/
#define 代码_无_跳转_宏名 (-1)


/*
** grep "ORDER OPR" if you 改变_变量 these enums  (ORDER OP)
*/
typedef enum 二元操作者_枚举 {
  /* arithmetic operators */
  操作者_加法, 操作者_减法, 操作者_乘法, 操作者_取模, 操作者_幂运算,
  操作者_除法, 操作者_整数除,
  /* bitwise operators */
  操作者_位与, 操作者_位或, 操作者_位异或,
  操作者_左移, 操作者_右移,
  /* string operator */
  操作者_拼接,
  /* comparison operators */
  操作者_相等, 操作者_小于, 操作者_小等,
  操作者_不等, 操作者_大于, 操作者_大等,
  /* logical operators */
  操作者_与, 操作者_或,
  操作者_禁二元操作者
} 二元操作者_枚举;


/* true if operation is foldable (that is, it is arithmetic or bitwise) */
#define 代码_折叠二元操作_宏名(操作_短变量)	((操作_短变量) <= 操作者_右移)


#define 代码_月亮K_编码ABC_宏名(字段静态_变量,o,a,b,c)	月亮常量_代码ABCk_函(字段静态_变量,o,a,b,c,0)


typedef enum 一元操作者_枚举 { 操作者_减号, 操作者_位非, 操作者_非, 操作者_长度, 操作者_禁一元操作者 } 一元操作者_枚举;


/* get (pointer 到_变量) instruction of given '表达式描述_结' */
#define 代码_获取指令_宏名(字段静态_变量,e)	((字段静态_变量)->f->代码_变量[(e)->u.信息_短变量])


#define 代码_月亮K_设置多返回_宏名(字段静态_变量,e)	月亮常量_设置返回值_函(字段静态_变量, e, 月头_月亮_多返回_宏名)

#define 代码_月亮K_跳转到_宏名(字段静态_变量,t)	月亮常量_补丁列表_函(字段静态_变量, 月亮常量_跳转_函(字段静态_变量), t)

配置_月亮I_函_宏名 int 月亮常量_代码_函 (函状态机_结 *字段静态_变量, Instruction i);
配置_月亮I_函_宏名 int 月亮常量_代码ABx_函 (函状态机_结 *字段静态_变量, 操作码_枚举 o, int A, unsigned int Bx);
配置_月亮I_函_宏名 int 月亮常量_代码AsBx_函 (函状态机_结 *字段静态_变量, 操作码_枚举 o, int A, int Bx);
配置_月亮I_函_宏名 int 月亮常量_代码ABCk_函 (函状态机_结 *字段静态_变量, 操作码_枚举 o, int A,
                                            int B, int C, int k);
配置_月亮I_函_宏名 int 月亮常量_是否为整数常量_函 (表达式描述_结 *e);
配置_月亮I_函_宏名 int 月亮常量_表达式到常量_函 (函状态机_结 *字段静态_变量, const 表达式描述_结 *e, 标签值_结 *v);
配置_月亮I_函_宏名 void 月亮常量_修正行号_函 (函状态机_结 *字段静态_变量, int 行_变量);
配置_月亮I_函_宏名 void 月亮常量_空值_函 (函状态机_结 *字段静态_变量, int from, int n);
配置_月亮I_函_宏名 void 月亮常量_保留寄存器们_函 (函状态机_结 *字段静态_变量, int n);
配置_月亮I_函_宏名 void 月亮常量_检查栈_函 (函状态机_结 *字段静态_变量, int n);
配置_月亮I_函_宏名 void 月亮常量_整型_函 (函状态机_结 *字段静态_变量, int 寄存_短变量, 炉_整数型 n);
配置_月亮I_函_宏名 void 月亮常量_卸货变量们_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 int 月亮常量_表达式到任意寄存器_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_表达式到任意寄存器更新_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_表达式到下一个寄存器_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_表达式到值_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 int 月亮常量_表达式到RK_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_自身_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e, 表达式描述_结 *键_小变量);
配置_月亮I_函_宏名 void 月亮常量_已索引_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *t, 表达式描述_结 *k);
配置_月亮I_函_宏名 void 月亮常量_去若真_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_去若假_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_存储变量_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *变_短变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 void 月亮常量_设置返回值_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e, int 结果数目_变量);
配置_月亮I_函_宏名 void 月亮常量_设置一个返回_函 (函状态机_结 *字段静态_变量, 表达式描述_结 *e);
配置_月亮I_函_宏名 int 月亮常量_跳转_函 (函状态机_结 *字段静态_变量);
配置_月亮I_函_宏名 void 月亮常量_返回_函 (函状态机_结 *字段静态_变量, int 首先_变量, int 返数_缩变量);
配置_月亮I_函_宏名 void 月亮常量_补丁列表_函 (函状态机_结 *字段静态_变量, int 列表_变量, int 目标_变量);
配置_月亮I_函_宏名 void 月亮常量_补丁到这里_函 (函状态机_结 *字段静态_变量, int 列表_变量);
配置_月亮I_函_宏名 void 月亮常量_拼接_函 (函状态机_结 *字段静态_变量, int *l1, int l2);
配置_月亮I_函_宏名 int 月亮常量_获取标号_函 (函状态机_结 *字段静态_变量);
配置_月亮I_函_宏名 void 月亮常量_前缀_函 (函状态机_结 *字段静态_变量, 一元操作者_枚举 操作_短变量, 表达式描述_结 *v, int 行_变量);
配置_月亮I_函_宏名 void 月亮常量_中缀_函 (函状态机_结 *字段静态_变量, 二元操作者_枚举 操作_短变量, 表达式描述_结 *v);
配置_月亮I_函_宏名 void 月亮常量_后缀_函 (函状态机_结 *字段静态_变量, 二元操作者_枚举 操作_短变量, 表达式描述_结 *变1_缩变量,
                            表达式描述_结 *变2_缩变量, int 行_变量);
配置_月亮I_函_宏名 void 月亮常量_设置表大小_函 (函状态机_结 *字段静态_变量, int 程序计数_变量,
                                  int 奖励_变量, int 数组大小_缩变量, int hsize);
配置_月亮I_函_宏名 void 月亮常量_设置列表_函 (函状态机_结 *字段静态_变量, int 基本_变量, int nelems, int 到存储_小写);
配置_月亮I_函_宏名 void 月亮常量_完成_函 (函状态机_结 *字段静态_变量);
配置_月亮I_函_宏名 限制_l_无返回值_宏名 月亮常量_语义错误_函 (词法状态机_结 *状列_缩变量, const char *消息_缩变量);


#endif
