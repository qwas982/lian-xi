/*
** $Id: ljumptab.h $
** Jump 表_结 for the Lua interpreter
** See Copyright Notice in lua.h
*/


#undef 虚拟机_虚机调度_宏名
#undef 虚拟机_虚机情况_宏名
#undef 虚拟机_虚机破断_宏名

#define 虚拟机_虚机调度_宏名(x)     goto *调度表_短变量[x];

#define 虚拟机_虚机情况_宏名(l)     L_##l:

#define 虚拟机_虚机破断_宏名		虚拟机_虚机拾取_宏名(); 虚拟机_虚机调度_宏名(操作码_获取_操作码_宏名(i));


static const void *const 调度表_短变量[操作码_数目_操作码_宏名] = {

#if 0
** you can update the following 列表_变量 with this command:
**
**  sed -n '/^OP_/\!d; s/OP_/\&\&L_OP_/ ; s/,.*/,/ ; s/\/.*// ; p'  lopcodes.h
**
#endif

&&L_操作_移,
&&L_操作_载入整,
&&L_操作_载入浮,
&&L_操作_载入常,
&&L_操作_载入常额外,
&&L_操作_载入假,
&&L_操作_载入假跳过,
&&L_操作_载入真,
&&L_操作_载入空值,
&&L_操作_获取上值,
&&L_操作_设置上值,
&&L_操作_获取表上值内,
&&L_操作_获取表,
&&L_操作_获取整,
&&L_操作_获取字段,
&&L_操作_设置表上值内,
&&L_操作_设置表,
&&L_操作_设置整,
&&L_操作_设置字段,
&&L_操作_新表,
&&L_操作_自身,
&&L_操作_加整,
&&L_操作_加常,
&&L_操作_减常,
&&L_操作_乘常,
&&L_操作_取模常,
&&L_操作_幂运算常,
&&L_操作_除常,
&&L_操作_整数除常,
&&L_操作_位与常,
&&L_操作_位或常,
&&L_操作_位异或常,
&&L_操作_右移整,
&&L_操作_左移整,
&&L_操作_加,
&&L_操作_减,
&&L_操作_乘,
&&L_操作_取模,
&&L_操作_幂运算,
&&L_操作_除,
&&L_操作_整数除,
&&L_操作_位与,
&&L_操作_位或,
&&L_操作_位异或,
&&L_操作_左移,
&&L_操作_右移,
&&L_操作_元方法二元,
&&L_操作_元方法二元整,
&&L_操作_元方法二元常,
&&L_操作_一元减号,
&&L_操作_位非,
&&L_操作_非,
&&L_操作_长度,
&&L_操作_拼接,
&&L_操作_关闭,
&&L_操作_待关闭,
&&L_操作_跳转,
&&L_操作_相等,
&&L_操作_小于,
&&L_操作_小等,
&&L_操作_相等常,
&&L_操作_相等整,
&&L_操作_小于整,
&&L_操作_小等整,
&&L_操作_大于整,
&&L_操作_大等整,
&&L_操作_测试,
&&L_操作_测试设置,
&&L_操作_调用,
&&L_操作_尾调用,
&&L_操作_返回,
&&L_操作_返回0,
&&L_操作_返回1,
&&L_操作_为环,
&&L_操作_为预备,
&&L_操作_泛型为预备,
&&L_操作_泛型为调用,
&&L_操作_泛型为环,
&&L_操作_设置列表,
&&L_操作_闭包,
&&L_操作_变量实参,
&&L_操作_变量实参预备,
&&L_操作_额外实参

};
